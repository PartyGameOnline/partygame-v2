name: dependabot-auto-merge

on:
  # Dependabot が作る PR に対して実行（main / master 向け）
  pull_request:
    branches: [main, master]
    types: [opened, reopened, synchronize, labeled, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

jobs:
  automerge:
    # Dependabot が作成した PR のみ対象
    if: >
      github.actor == 'dependabot[bot]' ||
      (github.event.pull_request.user.login == 'dependabot[bot]')
    runs-on: ubuntu-latest
    steps:
      # 0) ブランチ保護の「承認必須」対策として自動承認
      - name: Auto-approve Dependabot PR
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # 0.5) PR がドラフトなら Ready に切り替え（Actionの代替として gh CLI を使用）
      - name: Mark PR ready (if draft)
        if: ${{ github.event.pull_request.draft == true }}
        run: gh pr ready ${{ github.event.pull_request.number }} -R "${{ github.repository }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 1) Dependabot メタデータ取得（更新種別の判定用）
      - name: Fetch metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2

      # 2) メジャーアップデート以外は GitHub の Auto-merge を有効化（squash）
      - name: Enable auto-merge (non-major only)
        if: ${{ steps.metadata.outputs.update-type != 'version-update:semver-major' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          merge-method: squash

      # 3) 必須チェックが success になるまで待機（この WF 自身は除外）
      - name: Wait for required checks
        uses: lewagon/wait-on-check-action@v1.3.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          running-workflow-name: dependabot-auto-merge
          wait-interval: 10
          allowed-conclusions: success

      # 4) フォールバック：未マージなら API で squash merge
      - name: Merge when green (fallback)
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const { data } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });
            if (data.merged) {
              core.info(`PR #${pr.number} already merged ✅`);
              return;
            }
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash',
              });
              core.info(`PR #${pr.number} merged via API ✅`);
            } catch (e) {
              core.warning(`Fallback merge failed: ${e.message}`);
            }
